/*DESENVOLENDO TRIGGERS
TRIGGER É UM TIPO ESPECIAL DE PROCEDIMENTO ARMAZENADO, QUE É EXECUTADO SEMPRE QUE 
HÁ UMA TENTATIVA DE MODIFICAR OS DADOS DE UMA TABELA QUE É PROTEGIDA POR ELE. 
É MUITO UTILIZADA PARA AJUDAR A MANTER A CONSISTÊNCIA DOS DADOS OU PARA 
PROPAGAR ALTERAÇÕES EM UM DETERMINADO DADO DE UMA TABELA PARA OUTRAS

ELEMENTOS DE UMA TRIGGER:

-TEMPO -> VALORES POSSIVEIS: BEFORE, AFTER E INSTEAD OF (SUBSTITUI O EVENTO)
-EVENTO -> VALORES POSSIVEIS: INSERT, UPDATE E DELETE
-TIPO -> VALORES POSSIVEIS: STATEMENT E FOR EACH ROW
-CORPO -> QUE AÇÕES A TRIGGER EXECUTA*/


--CRIAÇÃO E MANUTENÇÃO DE TRIGGERS


--CRIANDO BLOCO ANÔNIMO PARA APLICAR REGRAS NAS TRIGGERS
DECLARE
  HORA VARCHAR2(2);
  H NUMBER;
BEGIN
  H := TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')); --A VARIAVEL RECEBERA SOMENTE HORA ATUAL INTEIRA
  DBMS_OUTPUT.PUT_LINE(H||' '||TO_CHAR(SYSDATE+3, 'DAY')); 
END;

BEGIN
  IF(TO_CHAR(SYSDATE, 'DAY') IN ('SABADO', 'DOMINGO') OR
     TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN 8 AND 18) THEN  --SE A HORA NAO ESTIVER ENTRE 8 E 18, EXECUTE O RAISE
     RAISE_APPLICATION_ERROR (-20001, 'FORA DE HORARIO COMERCIAL');
  END IF;
END;

--CRIANDO TRIGGER
CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO
BEFORE INSERT OR DELETE ON TCONTRATO
BEGIN
  IF(TO_CHAR(SYSDATE, 'D') IN (1, 7) OR
     TO_NUMBER(TO_CHAR(SYSDATE, 'HH24')) NOT BETWEEN 8 AND 18) THEN
     RAISE_APPLICATION_ERROR (-20001, 'FORA DE HORARIO COMERCIAL');
  END IF;
END;


--
INSERT INTO TCONTRATO VALUES (15, SYSDATE, 10, 1500, NULL);
   
   
SELECT * FROM TCONTRATO;


--TRIGGER DE LOG
CREATE TABLE LOG
( USUARIO VARCHAR2(30),
  HORARIO DATE,
  VALOR_ANTIGO VARCHAR2(10),
  VALOR_NOVO VARCHAR2(10)
);

--CRIANDO TRIGGER
CREATE OR REPLACE TRIGGER GERA_LOG_ALT
AFTER UPDATE OF TOTAL ON TCONTRATO           --ALTERAÇÃO SOMENTE EM TOTAL
DECLARE
--ENTRE O DECLARE E O BEGIN, ENCONTRAM-SE AS VARIÁVEIS
 
BEGIN
  INSERT INTO LOG(USUARIO, HORARIO) VALUES (USER, SYSDATE);
END;

SELECT * FROM TCONTRATO;

UPDATE TCONTRATO SET 
TOTAL = 5000 
WHERE COD_CONTRATO = 1

UPDATE TCONTRATO SET
COD_CONTRATO = 8
WHERE COD_ALUNO = 10

SELECT * FROM LOG; --VERIFICANDO O INSERT NO LOG

DROP TABLE LOG;
--
CREATE OR REPLACE TRIGGER VALIDA_HORARIO_CURSO2
BEFORE INSERT OR UPDATE OR DELETE ON TCONTRATO --UTILIZANDO UMA TRIGGER PARA TRÊS ELEMENTOS


--CASO QUEIRA CONTROLAR SEPARADAMENTE, CONSTRUA REGRAS NO BEGIN
BEGIN
  IF(TO_CHAR(SYSDATE, 'D') IN (1, 7) OR
     TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))NOT BETWEEN 8 AND 12) THEN
    IF(INSERTING) THEN
       RAISE_APPLICATION_ERROR(-20001, 'NÃO PODE INSERIR');
    ELSIF(DELETING) THEN
       RAISE_APPLICATION_ERROR(-20002, 'NÃO PODE REMOVER');
    ELSIF(UPDATING('TOTAL')) THEN
       RAISE_APPLICATION_ERROR(-20003, 'NÃO PODE ALTERAR TOTAL');
    ELSE
       RAISE_APPLICATION_ERROR(-20004, 'NÃO PODE ALTERAR');
    END IF;
  END IF;
 END;


--TESTES 
--DESABILITANDO TRIGGER

ALTER TRIGGER VALIDA_HORARIO_CURSO DISABLE; --PARA REABILITA-LA, SUBSTITUA DISABLE POR ENABLE


DELETE FROM TCONTRATO;
UPDATE TCONTRATO SET TOTAL = 5000 WHERE COD_CONTRATO = 1;
INSERT INTO TCONTRATO VALUES (90, SYSDATE, 10, 1500, NULL);

SELECT * FROM TCONTRATO;

ALTER TABLE LOG ADD OBS VARCHAR(80); --ACRESCENTANDO COLUNA NA TABELA LOG

CREATE OR REPLACE TRIGGER AUDITA_ALUNO
AFTER INSERT OR DELETE OR UPDATE ON TALUNO
FOR EACH ROW   --EXECUTA PARA CADA LINHA AFETADA. SEM O FOR EACH ROW EXECUTA UMA VEZ SÓ
  
BEGIN
  IF(DELETING) THEN
    INSERT INTO LOG(USUARIO, HORARIO, OBS)
    VALUES (USER, SYSDATE,'LINHAS DELETADAS.');
  ELSIF(INSERTING) THEN
    INSERT INTO LOG(USUARIO, HORARIO, OBS)
    VALUES (USER, SYSDATE, 'LINHAS INSERIDAS.');
  ELSIF(UPDATING('SALARIO')) THEN
    INSERT INTO LOG
    VALUES (:OLD.NOME, SYSDATE,:OLD.SALARIO,:NEW.SALARIO,'SALARIO ALTERADO'); --OLD E NEW SÓ É POSSIVEL UTILIZAR NO UPDATE
  ELSE
    INSERT INTO LOG(USUARIO, HORARIO, OBS)
    VALUES (USER, SYSDATE, 'ATUALIZAÇÃO ALUNO.');
  END IF;
END;

SELECT * FROM LOG;
SELECT * FROM TALUNO;

UPDATE TALUNO SET
SALARIO = 4000;


CREATE OR REPLACE TRIGGER GERA_LOG_CURSO
BEFORE UPDATE OF VALOR ON TCURSO
FOR EACH ROW
BEGIN
  INSERT INTO LOG(USUARIO, HORARIO, OBS,
                  VALOR_ANTIGO, VALOR_NOVO)
  VALUES (USER, SYSDATE, 'CURSO ALTERADO: '||:OLD.NOME,
          :OLD.VALOR, :NEW.VALOR);
END;

SELECT * FROM TCURSO

UPDATE TCURSO SET
VALOR = 3000
WHERE VALOR > 1500

SELECT * FROM LOG;



--
ALTER TABLE TCONTRATO ADD VALOR_COMISSAO NUMERIC(8,2); --CRIANDO NOVA COLUNA NA TABELA DE CONTRATO

CREATE OR REPLACE TRIGGER CALC_COMISSAO
BEFORE INSERT OR UPDATE OF TOTAL ON TCONTRATO
REFERENCING OLD AS ANTIGO                              --RENOMEANDO OLD E NEW
            NEW AS NOVO
FOR EACH ROW                                           --EXECUTANDO FOR EACH ROW SOB UMA CONDIÇÃO
WHEN(NOVO.TOTAL >= 5000)

DECLARE
   VCOMISSAO NUMERIC(6,2) := 0.15;                     --CRIANDO VARIAVEL
BEGIN
  IF(:NOVO.TOTAL <= 10000) THEN
     :NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO);
  ELSE
     :NOVO.VALOR_COMISSAO := :NOVO.TOTAL*(VCOMISSAO+0.05);
  END IF;
END;

ALTER TRIGGER VALIDA_HORARIO_CURSO2 DISABLE

INSERT INTO TCONTRATO(COD_CONTRATO, TOTAL)VALUES(34,6000);
INSERT INTO TCONTRATO(COD_CONTRATO, TOTAL)VALUES(35,12000);

SELECT * FROM TCONTRATO


--EXEMPLO DE VIEW COM TRIGGER E DML
CREATE OR REPLACE VIEW VCONTRATOS_PARES
AS SELECT COD_CONTRATO, DATA, COD_ALUNO, DESCONTO, TOTAL
   FROM   TCONTRATO
   WHERE  MOD(COD_CONTRATO, 2) = 0;


SELECT * FROM VCONTRATOS_PARES;

CREATE OR REPLACE TRIGGER TRI_CONTRATOS_PARES         --EXECUTANDO TRIGGER SEM INSERIR REGISTRO
INSTEAD OF INSERT OR DELETE OR UPDATE ON VCONTRATOS_PARES
DECLARE
BEGIN
  INSERT INTO LOG(USUARIO, HORARIO, OBS)
  VALUES (USER, SYSDATE, 'DML DA VIEW VCONTRATOS_PARES.');
END;

INSERT INTO VCONTRATOS_PARES VALUES(90, SYSDATE, 10, NULL, 5000);

SELECT * FROM LOG;  

