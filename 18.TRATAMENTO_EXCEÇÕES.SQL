--FORÇANDO ALGUNS ERROS (DE FORMA CONTROLADA)


DECLARE
  VCOD     TALUNO.COD_ALUNO%TYPE := 1;
  VCIDADE  TALUNO.CIDADE%TYPE;
  X NUMBER;
BEGIN
  SELECT CIDADE INTO VCIDADE
  FROM TALUNO
  WHERE COD_ALUNO = VCOD;
  X := 0 / 0;
  DBMS_OUTPUT.PUT_LINE('CIDADE: '||VCIDADE);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RAISE_APPLICATION_ERROR(-20001, 'ALUNO INEXISTENTE! '||SQLCODE||' '||SQLERRM);
  WHEN TOO_MANY_ROWS THEN
    RAISE_APPLICATION_ERROR(-20002, 'REGISTRO DUPLICADO! '||SQLCODE||' '||SQLERRM);
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20003, 'EXCECÃO DESCONHECIDA! '||SQLCODE||' '||SQLERRM);
END;    
      

-----------------

CREATE TABLE CONTAS                 --CRIANDO TABELA CONTAS
(
 CODIGO INTEGER NOT NULL PRIMARY KEY,
 VALOR  NUMBER (10, 2),
 JUROS  NUMBER (10, 2),
 VENCIMENTO DATE
);

--INSERINDO REGISTRO
INSERT INTO CONTAS VALUES (100, 550, 50, SYSDATE-10);

SELECT * FROM CONTAS;
COMMIT;

DECLARE
  EFK_INEXISTENTE EXCEPTION;
  PRAGMA EXCEPTION_INIT(EFK_INEXISTENTE, -02291); --SE O COD DER ERRO SERÁ TRANSFORMADO EM EXISTENTE
BEGIN
  INSERT INTO TBAIRRO VALUES(100, 100, 'ERRO');   --NUMERO DE COD DE BAIRRO E CIDADE INEXISTENTES
EXCEPTION
  WHEN EFK_INEXISTENTE THEN
    RAISE_APPLICATION_ERROR(-20200, 'CIDADE NÃO EXISTE!!' );
END;

SELECT * FROM TBAIRRO;
SELECT * FROM TCIDADE;


